"use client";
import { useState } from "react";
import NextImage from "next/image";
import { FaBolt, FaShieldAlt, FaMobileAlt, FaHeart, FaRegSmile } from "react-icons/fa";

type PdfItem = { type: "image"; file: File } | { type: "text"; text: string };

export default function PdfTool() {
  const [items, setItems] = useState<PdfItem[]>([]);
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);

  const texts = {
    title: "Professional Image to PDF",
    subtitle: "Convert images and text into high-quality PDFs instantly",
    featuresTitle: "Why Use Our PDF Tool?",
    features: [
      { icon: <FaBolt />, title: "Fast & Efficient", desc: "Generate PDFs in seconds" },
      { icon: <FaShieldAlt />, title: "Secure", desc: "Your files never leave your browser" },
      { icon: <FaMobileAlt />, title: "Responsive", desc: "Works on all devices" },
      { icon: <FaHeart />, title: "Free & Easy", desc: "No signup or payment required" },
      { icon: <FaRegSmile />, title: "User-Friendly", desc: "Intuitive interface for everyone" },
    ],
  };

  // Upload images
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files: PdfItem[] = Array.from(e.target.files).map((file) => ({
        type: "image",
        file,
      }));
      setItems((prev) => [...prev, ...files]);
      setPdfUrl(null);
    }
  };

  // Add text
  const handleAddText = () => {
    const text = prompt("Enter text to add in PDF:");
    if (text) {
      setItems((prev) => [...prev, { type: "text", text }]);
      setPdfUrl(null);
    }
  };

  // Delete item
  const handleDeleteItem = (index: number) => {
    setItems((prev) => prev.filter((_, i) => i !== index));
    setPdfUrl(null);
  };

  // Convert file to Base64
  const toBase64 = (file: File) =>
    new Promise<string>((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = (err) => reject(err);
    });

  // Create PDF
  const handleCreatePdf = async () => {
    if (!items.length) return;
    const { jsPDF } = await import("jspdf");
    const pdf = new jsPDF({ unit: "pt", format: "a4" });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 40;
    let y = margin;
    const lineHeight = 16;

    pdf.setFont("times", "normal");
    pdf.setFontSize(12);

    for (const item of items) {
      if (item.type === "image") {
        const imgData = await toBase64(item.file);
        const img = new window.Image();
        img.src = imgData;
        await new Promise((res) => (img.onload = res));

        const maxWidth = pageWidth - margin * 2;
        const maxHeight = pageHeight / 2;
        const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
        const newWidth = img.width * ratio;
        const newHeight = img.height * ratio;

        if (y + newHeight > pageHeight - margin) {
          pdf.addPage();
          y = margin;
        }

        pdf.addImage(img, "JPEG", (pageWidth - newWidth) / 2, y, newWidth, newHeight);
        y += newHeight + 20;
      }

      if (item.type === "text") {
        const wrapped = pdf.splitTextToSize(item.text, pageWidth - margin * 2);
        if (y + wrapped.length * lineHeight > pageHeight - margin) {
          pdf.addPage();
          y = margin;
        }
        pdf.text(wrapped, margin, y);
        y += wrapped.length * lineHeight + 20;
      }
    }

    // Footer
    const pageCount =
      (pdf as unknown as { internal: { pages: unknown[] } }).internal.pages.length || 1;
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(10);
      pdf.text(`Page ${i} of ${pageCount}`, pageWidth - margin, pageHeight - 20, { align: "right" });
      pdf.text("Generated by ImageTools", margin, pageHeight - 20);
    }

    const blob = pdf.output("blob");
    setPdfUrl(URL.createObjectURL(blob));
  };

  return (
    <div className="max-w-6xl mx-auto px-6 py-12">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl md:text-5xl text-blue-600 font-bold mb-2">{texts.title}</h1>
        <p className="text-gray-600 text-lg md:text-xl">{texts.subtitle}</p>
      </div>

      {/* Main Grid */}
      <div className={`grid ${items.length ? "md:grid-cols-2" : "grid-cols-1"} gap-8`}>
        {/* Left: Upload Section */}
        <div className="bg-white shadow-lg rounded-3xl p-8 text-center border-2 border-dashed border-gray-300">
          {!items.length && <p className="text-gray-500 mb-4">Upload images or add text to create your PDF</p>}

          {items.length > 0 && (
            <ul className="text-left text-sm mb-4 max-h-40 overflow-y-auto">
              {items.map((item, idx) => (
                <li key={idx} className="flex justify-between items-center text-gray-700 mb-1">
                  <span>{item.type === "image" ? `üñº ${item.file.name}` : `üìù ${item.text.slice(0, 30)}...`}</span>
                  <button
                    onClick={() => handleDeleteItem(idx)}
                    className="text-red-500 hover:text-red-700 font-bold"
                  >
                    ‚úñ
                  </button>
                </li>
              ))}
            </ul>
          )}

          <div className="space-y-4">
            <input type="file" multiple accept="image/*" onChange={handleImageChange} id="fileInput" className="hidden" />
            <label
              htmlFor="fileInput"
              className="cursor-pointer bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition font-medium shadow-md inline-block"
            >
              Upload Images
            </label>

            <button
              onClick={handleAddText}
              className="bg-purple-600 text-white px-6 py-3 rounded-xl hover:bg-purple-700 transition font-medium shadow-md inline-block"
            >
              ‚ûï Add Text
            </button>
          </div>
        </div>

        {/* Right: PDF Preview */}
        {items.length > 0 && (
          <div className="space-y-6">
            <div className="bg-white shadow-md rounded-3xl p-6">
              <h3 className="font-semibold mb-4 text-lg">Convert Options</h3>
              <button
                onClick={handleCreatePdf}
                className="w-full bg-green-600 text-white py-3 rounded-xl hover:bg-green-700 font-medium transition"
              >
                Generate PDF
              </button>
            </div>

            {pdfUrl && (
              <div className="bg-white shadow-md rounded-3xl p-6 text-center">
                <h3 className="font-semibold mb-4 text-lg">PDF Preview</h3>
                <iframe src={pdfUrl} className="w-full h-64 border rounded-xl mb-4" />
                <a
                  href={pdfUrl}
                  download="professional.pdf"
                  className="bg-blue-600 text-white px-6 py-3 rounded-xl hover:bg-blue-700 transition font-medium shadow-md inline-block"
                >
                  ‚¨á Download PDF
                </a>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Features Section */}
      <div className="text-center mt-16">
        <h2 className="text-3xl md:text-4xl font-bold mb-8">{texts.featuresTitle}</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
          {texts.features.map((feature, idx) => (
            <div key={idx} className="bg-white p-6 rounded-3xl shadow hover:shadow-lg transition text-center">
              <div className="flex justify-center items-center text-4xl text-blue-600 mb-4">{feature.icon}</div>
              <h3 className="font-semibold text-lg mb-2">{feature.title}</h3>
              <p className="text-gray-600 text-sm">{feature.desc}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
